#!/usr/bin/env python3

from GaugiKernel          import LoggingLevel, get_argparser_formatter
from G4Kernel             import *
import argparse
import sys,traceback




def build_argparser():
  # create the top-level parser
  parser = argparse.ArgumentParser(description = '', formatter_class=get_argparser_formatter(), add_help = False )

  parser.add_argument('-i','--input-file', action='store', dest='input_file', required = False,
                      help = "The event input file generated by the Pythia event generator.")

  parser.add_argument('-o','--output-file', action='store', dest='output_file', required = False,
                      help = "The reconstructed event file generated by lzt/geant4 framework.")

  parser.add_argument('--nov','--number-of-events', action='store', dest='number_of_events', required = False, type=int, default=-1,
                      help = "The number of events to apply the reconstruction.")

  parser.add_argument('-l', '--output-level', action='store', dest='output_level', required = False, type=str, default='INFO',
                      help = "The output level messenger.")

  parser.add_argument('-c','--command', action='store', dest='command', required = False, default="''",
                      help = "The preexec command")

  return parser


def run(args):
  
  outputLevel = LoggingLevel.toC(args.output_level)
  try:

    exec(args.command)

    from GaugiKernel import ComponentAccumulator
    acc = ComponentAccumulator("ComponentAccumulator", args.output_file)

    # the reader must be first in sequence
    from RootStreamBuilder import RootStreamHITReader, recordable
    reader = RootStreamHITReader("HITReader", 
                                  InputFile       = args.input_file,
                                  OutputHitsKey   = recordable("Hits"),
                                  OutputEventKey  = recordable("Events"),
                                  OutputTruthKey  = recordable("Particles"),
                                  OutputSeedsKey  = recordable("Seeds"),
                                  OutputLevel     = outputLevel,
                                )

    reader.merge(acc)
    
    # digitalization!
    from CaloCellBuilder import CaloCellBuilder
    from ATLAS import ATLASConstruction as ATLAS

    calorimeter = CaloCellBuilder("CaloCellBuilder", ATLAS(),
                                  HistogramPath         = "Expert/Cells",
                                  OutputLevel           = outputLevel,
                                  InputHitsKey          = recordable("Hits"      ),
                                  OutputCellsKey        = recordable("Cells"     ),
                                  OutputTruthCellsKey   = recordable("TruthCells"),
                                  )
    calorimeter.merge(acc)

    from RootStreamBuilder import RootStreamESDMaker
    ESD = RootStreamESDMaker( "RootStreamESDMaker",
                              InputCellsKey   = recordable("Cells"),
                              InputEventKey   = recordable("Events"),
                              InputTruthKey   = recordable("Particles"),
                              InputSeedsKey   = recordable("Seeds"),          
                              OutputLevel     = outputLevel)
    acc += ESD
    

    acc.run(args.number_of_events)
    sys.exit(0)
    
  except Exception as e:
    traceback.print_exc()
    sys.exit(1)
    

if __name__ == "__main__":
  parser = build_argparser()
  if len(sys.argv)==1:
    parser.print_help()
    sys.exit(1)
  args = parser.parse_args()
  run(args)
  
  

