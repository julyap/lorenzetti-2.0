#!/usr/bin/env python3
from GaugiKernel   import Logger, get_argparser_formatter
import argparse
import sys,os,traceback


mainLogger = Logger.getModuleLogger("pythia")


parser = argparse.ArgumentParser(description = '', formatter_class=get_argparser_formatter() )

#
# Mandatory arguments
#
parser.add_argument('-e','--event-numbers', action='store', dest='event_numbers', required = False, type=str, default=None,
                    help = "The event number list separated by ','. e.g. --event-numbers '0,1,2,3'")
parser.add_argument('-o','--output-file', action='store', dest='output_file', required = True,
                    help = "The event file generated by pythia.")
parser.add_argument('--nov','--number-of-events', action='store', dest='nov', required = False, type=int, default=1,
                    help = "The number of events to be generated.")
parser.add_argument('--run-number', action='store', dest='run_number', required = False, type=int, default = 0,
                    help = "The run number.")
parser.add_argument('-s','--seed', action='store', dest='seed', required = False, type=int, default=0,
                    help = "The pythia seed (zero is the clock system)")
parser.add_argument('--output-level', action='store', dest='output_level', required = False, type=str, default="INFO",
                    help = "The output level messenger.")
parser.add_argument('--pileup-avg', action='store', dest='pileup_avg', required = False, type=int, default=0,
                    help = "The pileup average (default is zero).")
parser.add_argument('--pileup-sigma', action='store', dest='pileup_sigma', required = False, type=int, default=0,
                    help = "The pileup sigma (default is zero).")
parser.add_argument('--bc-id-start', action='store', dest='bc_id_start', required = False, type=int, default=-21,
                    help = "The bunch crossing id start.")
parser.add_argument('--bc-id-end', action='store', dest='bc_id_end', required = False, type=int, default=4,
                    help = "The bunch crossing id end.")
parser.add_argument('--bc-duration', action='store', dest='bc_duration', required = False, type=int, default=25,
                    help = "The bunch crossing duration (in nanoseconds).")





if len(sys.argv)==1:
  parser.print_help()
  sys.exit(1)

args = parser.parse_args()


try:

  minbias_file = os.environ['LZT_PATH']+'/generator/evtgen/data/minbias_config.cmnd'
  
  from evtgen import Pythia8
  from GenKernel import EventTape
  from filters import FixedRegion

  tape = EventTape( "EventTape", OutputFile = args.output_file, RunNumber=args.run_number)
  
  # dummy seed to store all pileup particles
  seed = FixedRegion("Seed", Eta=0, Phi=0 )
  tape+=seed
  
 
  # pileup generator
  from filters import Pileup
  pileup = Pileup( "MinimumBias",
                 Pythia8("Generator", File=minbias_file, Seed=args.seed),
                 EtaMax         = 1.4,
                 Select         = 2,
                 PileupAvg      = args.pileup_avg,
                 PileupSigma    = args.pileup_sigma,
                 BunchIdStart   = args.bc_id_start,
                 BunchIdEnd     = args.bc_id_end,
                 OutputLevel    = args.output_level,
                 DeltaEta       = 999,
                 DeltaPhi       = 999,
                 )
  # Add pileup
  tape+=pileup

  # Run!
  evts = [int(evt) for evt in args.event_numbers.split(",")] if args.event_numbers else args.nov
  tape.run(evts)

  sys.exit(0)
except  Exception as e:
  traceback.print_exc()
  mainLogger.error(e)
  sys.exit(1)
