#!/usr/bin/env python3

import argparse
import sys, traceback
import os  # <--- IMPORTADO AQUI

from GaugiKernel.constants import *
from GaugiKernel           import LoggingLevel, get_argparser_formatter
from G4Kernel              import *
from RootStreamBuilder     import recordable


def build_argparser():
  parser = argparse.ArgumentParser(description = '', add_help = False, formatter_class = get_argparser_formatter() )

  parser.add_argument('-i','--input-file', action='store', dest='input_file', required = True,
                      help = "The event input file generated by the Pythia event generator.")

  parser.add_argument('-o','--output-file', action='store', dest='output_file', required = True,
                      help = "The reconstructed event file generated by lzt/geant4 framework.")

  parser.add_argument('-nt','--number-of-threads', action='store', dest='number_of_threads', required = False, type=int, default=os.cpu_count(),  # <--- AQUI
                      help = "The number of threads")

  parser.add_argument('--evt','--number-of-events', action='store', dest='number_of_events', required = False, type=int, default=None,
                      help = "The number of events to apply the reconstruction.")

  parser.add_argument('--enable-magnetic-field', action='store_true', dest='enable_magnetic_field',required = False, 
                      help = "Enable the magnetic field.")

  parser.add_argument('-t','--timeout', action='store', dest='timeout', required = False, type=int, default=120,
                      help = "Event timeout in minutes")

  parser.add_argument('-l', '--output-level', action='store', dest='output_level', required = False, type=str, default='INFO',
                      help = "The output level messenger.")

  parser.add_argument('-c','--command', action='store', dest='command', required = False, default="''",
                      help = "The preexec command")

  return parser


def run(args):

  outputLevel = LoggingLevel.toC(args.output_level)

  try:

    exec(args.command)

    from ATLAS import ATLASConstruction as ATLAS
    # Build the ATLAS detector
    detector = ATLAS( UseMagneticField = args.enable_magnetic_field )

    acc = ComponentAccumulator("ComponentAccumulator", detector,
                                NumberOfThreads = args.number_of_threads,
                                OutputFile      = args.output_file,
                                Timeout         = args.timeout * MINUTES )

    gun = EventReader( "EventReader", args.input_file,
                       # outputs
                       OutputEventKey   = recordable("Events"   ),
                       OutputTruthKey   = recordable("Particles"),
                       OutputSeedKey    = recordable("Seeds"    ),
                       )

    from CaloCellBuilder import CaloHitBuilder
    calorimeter = CaloHitBuilder("CaloHitBuilder",
                                  HistogramPath = "Expert/Hits",
                                  OutputLevel   = outputLevel,
                                  InputEventKey = recordable("Events"),
                                  OutputHitsKey = recordable("Hits")
                                  )
    gun.merge(acc)
    calorimeter.merge(acc)


    from RootStreamBuilder import RootStreamHITMaker
    HIT = RootStreamHITMaker( "RootStreamHITMaker",
                               OutputLevel     = outputLevel,
                               # input from context
                               InputHitsKey    = recordable("Hits"),
                               InputEventKey   = recordable("Events"),
                               InputTruthKey   = recordable("Particles"),
                               InputSeedsKey   = recordable("Seeds"),
                               )
    acc += HIT
    acc.run(args.number_of_events)

    sys.exit(0)

  except  Exception:
    traceback.print_exc()
    sys.exit(1)


if __name__ == "__main__":

  parser = build_argparser()
  if len(sys.argv)==1:
    print(parser.print_help())
    sys.exit(1)

  args = parser.parse_args()
  run(args)
