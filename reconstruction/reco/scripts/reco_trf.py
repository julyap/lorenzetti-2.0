#!/usr/bin/env python3

from GaugiKernel          import LoggingLevel, LoggingLevel, get_argparser_formatter
from G4Kernel             import *
import argparse
import sys,os, traceback


def build_argparser():
  # create the top
  parser = argparse.ArgumentParser(description = '', formatter_class=get_argparser_formatter(), add_help = False )

  parser.add_argument('-i','--input-file', action='store', dest='input_file', required = False,
                      help = "The event input file generated by the Pythia event generator.")

  parser.add_argument('-o','--output-file', action='store', dest='output_file', required = False,
                      help = "The reconstructed event file generated by lzt/geant4 framework.")

  parser.add_argument('--nov','--number-of-events', action='store', dest='number_of_events', required = False, type=int, default=-1,
                      help = "The number of events to apply the reconstruction.")

  parser.add_argument('-l', '--output-level', action='store', dest='output_level', required = False, type=str, default='INFO',
                      help = "The output level messenger.")

  parser.add_argument('-c','--command', action='store', dest='command', required = False, default="''",
                      help = "The preexec command")
  
  return parser


def run(args):

  outputLevel = LoggingLevel.toC(args.output_level)

  try:

    exec(args.command)

    from GaugiKernel import ComponentAccumulator
    acc = ComponentAccumulator("ComponentAccumulator", args.output_file)


    from RootStreamBuilder import RootStreamESDReader, recordable
    ESD = RootStreamESDReader("ESDReader", 
                              InputFile       = args.input_file,
                              OutputCellsKey  = recordable("Cells"),
                              OutputEventKey  = recordable("Events"),
                              OutputTruthKey  = recordable("Particles"),
                              OutputSeedsKey  = recordable("Seeds"),
                              OutputLevel     = outputLevel
                              )
    ESD.merge(acc)


    # build cluster for all seeds
    from CaloClusterBuilder import CaloClusterMaker
    cluster = CaloClusterMaker( "CaloClusterMaker",
                                InputCellsKey        = recordable("Cells"),
                                InputSeedsKey        = recordable("Seeds"),
                                # output as
                                OutputClusterKey     = recordable("Clusters"),
                                # other configs
                                HistogramPath        = "Expert/Clusters",
                                OutputLevel          = outputLevel )



    from CaloRingsBuilder import CaloRingsBuilderCfg
    rings = CaloRingsBuilderCfg( "CaloRingsBuilder",
                                InputClusterKey    = recordable("Clusters"),
                                OutputRingerKey    = recordable("Rings"),
                                HistogramPath      = "Expert/Rings",
                                OutputLevel        = outputLevel)


    from EgammaBuilder import ElectronBuilderCfg
    hypo = ElectronBuilderCfg( "ElectronBuilder",
                               InputClusterKey    = recordable("Clusters"),
                               OutputElectronKey  = recordable("Electrons"),
                               OutputLevel        = outputLevel) 



    from RootStreamBuilder import RootStreamAODMaker
    AOD = RootStreamAODMaker( "RootStreamAODMaker",
                              InputEventKey    = recordable("Events"),
                              InputSeedsKey    = recordable("Seeds"),
                              InputTruthKey    = recordable("Particles"),
                              InputCellsKey    = recordable("Cells"),
                              InputClusterKey  = recordable("Clusters"),
                              InputRingerKey   = recordable("Rings"),
                              InputElectronKey = recordable("Electrons"),
                              OutputLevel      = outputLevel)

    # sequence
    acc+= cluster
    acc+= rings
    acc+= hypo
    acc+= AOD

    acc.run(args.number_of_events)

    # del acc
    sys.exit(0)

  except  Exception:
    traceback.print_exc()
    sys.exit(1)




if __name__ == "__main__":
  parser = build_argparser()
  if len(sys.argv)==1:
    parser.print_help()
    sys.exit(1)
  args = parser.parse_args()
  run(args)
  